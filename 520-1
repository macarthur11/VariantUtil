package spm;

import org.json.*;

import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.base.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.ObjectWriter;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.lang.reflect.Array;
import java.util.ArrayList;
import spm.Varhouse.*;
import spm.Varhouse.Variant.GermlineSequence;

/**
 * Hello world!
 *
 */
public class App {
    public static void main(String[] args) throws JSONException, JsonMappingException, JsonProcessingException {
        final String incomingJSON = "{\"data\":{\"lastName\":\"Smith\",\"firstName\":\"John\",\"age\":25,\"variants\":[{\"variantId\":\"GENE\", \"streetAddress\":\"21 2nd Street\",\"city\":\"New York\",\"state\":\"NY\",\"postalCode\":10021}]}}";
        // System.out.println(incomingJSON);
        // System.out.println("Hello World!");

        JSONObject jsonObj = new JSONObject(incomingJSON); // turn string into jsonObj
        JSONObject data = (JSONObject) jsonObj.get("data"); // get jsonObj into data
        JSONArray variantsArr = (JSONArray) data.getJSONArray("variants"); // get Array of objects into variants

        for (int index = 0; index < variantsArr.length(); index++) {

            // build objects to pass to create variant
            // String varType;
            // HashMap<String, Object> variantDataMap = new HashMap<String, Object>();

            // loop through and get individual variants into JSONObjects
            JSONObject variantObj = variantsArr.getJSONObject(index);
            System.out.println(variantObj.getClass());
            Map<String, Object> OrgVariant = buildVariant(variantObj);

            System.out.println(OrgVariant.toString());
            System.out.println(OrgVariant.getClass());

            // above here it parses
            // now trying jackson

            String jacksonString = "{\"alt\":\"T\",\"chromosome\":\"16\",\"codingChange\":\"c.4602delC\",\"entrezId\":\"7249\",\"geneMimNumber\":\"191092\",\"geneSymbol\":\"TSC2\",\"position\":2085261,\"probandZygosity\":\"NA\",\"proteinChange\":\"p.Asp1535fs\",\"ref\":\"TC\",\"reportTableType\":\"germline\",\"transcriptId\":\"NM_000548.5\",\"vaf\":0.474025974025974}";

            Variant Variant = new spm.Varhouse.Variant();
            ObjectMapper objectMapper = new ObjectMapper();
            GermlineSequence GermlineSequence = objectMapper.readValue(jacksonString, Variant.GermlineSequence.class);

            System.out.println(objectMapper.writeValueAsString(GermlineSequence));

        }

    }

    // next level

    static Map<String, Object> buildVariant(JSONObject variantObject) {

        String variantId;
        String streetAddress;
        String city;
        String state;
        String postalCode;

        HashMap<String, Object> Variant = new HashMap<String, Object>();
        for (Iterator i = variantObject.keys(); i.hasNext();) {
            String prop = (String) i.next();
            Object val = new Object();
            try {
                val = variantObject.get(prop);
            } catch (JSONException e) {

                System.out.println(e);
            }
            // System.out.println("Prop: " + prop + ", Val: " + val);
            Variant.put(prop, val);
        }
        return Variant;
    }

}

/*
 * ArrayList<String> variantList = new ArrayList<String>();
 * for (int index = 0; index < variants.length(); index++) {
 * System.out.println("Index: " + index);
 * // System.out.println(variants.get(index));
 * for (int j = 0; j < variants.get(index).length());
 * //String address = variantList.get(0).toString();
 * // System.out.println(address);
 * for (Object iterable_element : iterable) {
 * 
 * }
 * 
 * }
 * // HashMap individVariant = new HashMap<String, String>();
 */
